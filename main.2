#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.90.0.901 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 56 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 9 #"Consolas\0"
0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 248 248 242 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 174 129 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 253 151 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 102 217 239 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 248 248 242 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 249 38 114 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 117 113 94 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 230 219 116 0 0 0 -1 -1 2
35 #"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 174 129 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 166 226 46 0 0 0 -1 -1 2
42 #"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 102 217 239 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 253 151 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 166 226 46 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 253 151 31 0 0 0 -1 -1 2
47 #"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 248 248 242 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 2772 0 28 3 17 #"#lang racket/base"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"for-syntax"
0 0 24 3 1 #" "
0 0 14 3 12 #"syntax/parse"
0 0 24 3 1 #" "
0 0 14 3 11 #"racket/base"
0 0 24 3 1 #" "
0 0 14 3 13 #"racket/syntax"
0 0 24 3 1 #" "
0 0 14 3 12 #"racket/match"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 5 #"graph"
0 0 24 3 1 #" "
0 0 14 3 13 #"racket/syntax"
0 0 24 3 1 #" "
0 0 14 3 12 #"racket/match"
0 0 24 3 1 #" "
0 0 14 3 14 #"racket/generic"
0 0 24 3 1 #" "
0 0 14 3 15 #"racket/contract"
0 0 24 3 1 #" "
0 0 14 3 11 #"racket/list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 2 #" ("
0 0 14 3 9 #"except-in"
0 0 24 3 1 #" "
0 0 14 3 6 #"racket"
0 0 24 3 1 #" "
0 0 14 3 4 #"set!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"rename-in"
0 0 24 3 1 #" "
0 0 14 3 6 #"racket"
0 0 24 3 2 #" ["
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 11 #"former-set!"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #" ["
0 0 14 3 3 #"ref"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 7 #"entity?"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 3 #") ("
0 0 14 3 11 #"set-entity!"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"ref"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 11 #"former-set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 15 #"all-defined-out"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 12 #"all-from-out"
0 0 24 3 1 #" "
0 0 14 3 11 #"racket/base"
0 0 24 3 1 #" "
0 0 14 3 13 #"racket/syntax"
0 0 24 3 1 #" "
0 0 14 3 12 #"racket/match"
0 0 24 3 1 #" "
0 0 14 3 11 #"racket/list"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; A component is an identifier"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; and optionally some other data"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 9 #"component"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 5 #"proto"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 24 3 2 #" ("
0 0 15 3 16 #"define-component"
0 0 24 3 1 #" "
0 0 14 3 3 #"stx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 12 #"syntax-parse"
0 0 24 3 1 #" "
0 0 14 3 3 #"stx"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #"_"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ["
0 0 14 3 9 #"~optional"
0 0 24 3 1 #" "
0 0 14 3 13 #"given-generic"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 11 #"with-syntax"
0 0 24 3 3 #" (["
0 0 14 3 8 #"gen:name"
0 0 24 3 2 #" ("
0 0 14 3 9 #"format-id"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"gen:~a\""
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 4 #"name"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 17 3 53 #";; this is so we can search for a component type with"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 17 3 38 #";; something like: Shape?, Timer?, etc"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 15 #"define-generics"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 17 #"component:generic"
0 0 24 3 1 #" "
0 0 14 3 9 #"component"
0 0 24 3 4 #" () "
0 0 23 3 9 #"#:methods"
0 0 24 3 1 #" "
0 0 14 3 8 #"gen:name"
0 0 24 3 4 #" [])"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"create-component"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 2 #" ["
0 0 14 3 7 #"generic"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 5 #")])  "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 17 #"component:generic"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 7 #"generic"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 16 #"create-component"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 2 #"~?"
0 0 24 3 1 #" "
0 0 14 3 13 #"given-generic"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 8 #")))))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";; list of components"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 24 3 2 #" ("
0 0 15 3 16 #"define-archetype"
0 0 24 3 1 #" "
0 0 14 3 3 #"stx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 12 #"syntax-parse"
0 0 24 3 1 #" "
0 0 14 3 3 #"stx"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #"_"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 10 #"components"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 10 #"components"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";; entities"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";; cmpnts is a (make-hasheq)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 6 #"entity"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 10 #"components"
0 0 24 3 2 #") "
0 0 23 3 9 #"#:mutable"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; accepts a list of components"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define/contract"
0 0 24 3 2 #" ("
0 0 14 3 12 #"make-entity!"
0 0 24 3 1 #" "
0 0 14 3 6 #"cmpnts"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"->"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"listof"
0 0 24 3 1 #" "
0 0 14 3 10 #"component?"
0 0 24 3 2 #") "
0 0 14 3 7 #"entity?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 1 #"e"
0 0 24 3 2 #" ("
0 0 14 3 13 #"create-entity"
0 0 24 3 2 #" ("
0 0 14 3 6 #"gensym"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 4 #"hash"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-hasheq"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 15 3 8 #"for/list"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                (["
0 0 14 3 5 #"cmpnt"
0 0 24 3 1 #" "
0 0 14 3 6 #"cmpnts"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 45 #";; check if it's a component with data or not"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 15 #"component-proto"
0 0 24 3 1 #" "
0 0 14 3 5 #"cmpnt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 17 3 54 #";; NOTE: this means components are unique in an entity"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 9 #"hash-set!"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 14 3 4 #"hash"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 12 #"component-id"
0 0 24 3 1 #" "
0 0 14 3 5 #"cmpnt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 15 #"component-proto"
0 0 24 3 1 #" "
0 0 14 3 5 #"cmpnt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 9 #"hash-set!"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 14 3 4 #"hash"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 12 #"component-id"
0 0 24 3 1 #" "
0 0 14 3 5 #"cmpnt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 21 3 2 #"#t"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 22 #"set-entity-components!"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 4 #"hash"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 17 #";; add e to world"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"when"
0 0 24 3 2 #" ("
0 0 14 3 13 #"current-world"
0 0 24 3 3 #") ("
0 0 14 3 20 #"add-entity-to-world!"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #" ("
0 0 14 3 13 #"current-world"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"create-entity"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 2 #" ["
0 0 14 3 6 #"cmpnts"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 5 #")])  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"entity"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 6 #"cmpnts"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"set-entity!"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #" ["
0 0 14 3 3 #"ref"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 62
#";; if the entity has just one component then it is unambiguous"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 65
#";; if it has more than one component then we need a reference to "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 26 #";; the component to set it"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"cmpnts-hash"
0 0 24 3 2 #" ("
0 0 14 3 17 #"entity-components"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"keys"
0 0 24 3 2 #" ("
0 0 14 3 9 #"hash-keys"
0 0 24 3 1 #" "
0 0 14 3 11 #"cmpnts-hash"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"cmpnts-length"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"keys"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 13 #"cmpnts-length"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"hash-set!"
0 0 24 3 1 #" "
0 0 14 3 11 #"cmpnts-hash"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"keys"
0 0 24 3 2 #") "
0 0 14 3 4 #"expr"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 3 #"ref"
0 0 24 3 2 #" ("
0 0 14 3 9 #"hash-set!"
0 0 24 3 1 #" "
0 0 14 3 11 #"cmpnts-hash"
0 0 24 3 1 #" "
0 0 14 3 3 #"ref"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"raise"
0 0 24 3 1 #" "
0 0 19 3 41 #"\"attempt to set entity was too ambiguous\""
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 20 #"add-entity-to-world!"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 4 #"wrld"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 16 #"current-entities"
0 0 24 3 2 #" ("
0 0 14 3 14 #"world-entities"
0 0 24 3 1 #" "
0 0 14 3 4 #"wrld"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"hash-set!"
0 0 24 3 1 #" "
0 0 14 3 16 #"current-entities"
0 0 24 3 2 #" ("
0 0 14 3 9 #"entity-id"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 1 #"e"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 25 #"remove-entity-from-world!"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 4 #"wrld"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 16 #"current-entities"
0 0 24 3 2 #" ("
0 0 14 3 14 #"world-entities"
0 0 24 3 1 #" "
0 0 14 3 4 #"wrld"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"hash-remove!"
0 0 24 3 1 #" "
0 0 14 3 16 #"current-entities"
0 0 24 3 2 #" ("
0 0 14 3 9 #"entity-id"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 27 #"get-entities-with-archetype"
0 0 24 3 1 #" "
0 0 14 3 4 #"wrld"
0 0 24 3 1 #" "
0 0 14 3 5 #"atype"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"entity-has-archetype?"
0 0 24 3 1 #" "
0 0 14 3 3 #"ent"
0 0 24 3 1 #" "
0 0 14 3 5 #"atype"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 26 #"entity-contains-archetype?"
0 0 24 3 1 #" "
0 0 14 3 3 #"ent"
0 0 24 3 1 #" "
0 0 14 3 5 #"atype"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"add-entity!"
0 0 24 3 1 #" "
0 0 14 3 12 #"make-entity!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"get"
0 0 24 3 1 #" "
0 0 14 3 3 #"ent"
0 0 24 3 1 #" "
0 0 14 3 3 #"ref"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 2 #" ("
0 0 14 3 17 #"entity-components"
0 0 24 3 1 #" "
0 0 14 3 3 #"ent"
0 0 24 3 2 #") "
0 0 14 3 3 #"ref"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";; worlds"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; entities are a make-hasheq"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 8 #"entities"
0 0 24 3 1 #" "
0 0 14 3 16 #"dependency-graph"
0 0 24 3 2 #") "
0 0 23 3 9 #"#:mutable"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; assuming that most programs will use a single world"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; we can support a single-world mode where things are"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";; automatically added to the default world"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; if we ever need to keep track of a list of worlds"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 8 #"universe"
0 0 24 3 2 #" ("
0 0 14 3 6 #"worlds"
0 0 24 3 2 #") "
0 0 23 3 9 #"#:mutable"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"recess-universe"
0 0 24 3 2 #" ("
0 0 14 3 8 #"universe"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"current-world"
0 0 24 3 2 #" ("
0 0 14 3 14 #"make-parameter"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"current-events"
0 0 24 3 2 #" ("
0 0 14 3 14 #"make-parameter"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-hasheq"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"start-time"
0 0 24 3 2 #" ("
0 0 14 3 14 #"make-parameter"
0 0 24 3 2 #" ("
0 0 14 3 15 #"current-seconds"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; create a topological ordering of the recess"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";; graph and execute the nodes in that order"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 24 3 2 #" ("
0 0 15 3 12 #"begin-recess"
0 0 24 3 1 #" "
0 0 14 3 3 #"stx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 12 #"syntax-parse"
0 0 24 3 1 #" "
0 0 14 3 3 #"stx"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 4 #"~seq"
0 0 24 3 1 #" "
0 0 23 3 9 #"#:systems"
0 0 24 3 1 #" "
0 0 14 3 14 #"system-name:id"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"~seq"
0 0 24 3 1 #" "
0 0 23 3 12 #"#:initialize"
0 0 24 3 1 #" "
0 0 14 3 14 #"init-expr:expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"~seq"
0 0 24 3 1 #" "
0 0 23 3 11 #"#:stop-when"
0 0 24 3 1 #" "
0 0 14 3 14 #"stop-expr:expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 15 3 12 #"parameterize"
0 0 24 3 3 #" (["
0 0 14 3 13 #"current-world"
0 0 24 3 2 #" ("
0 0 14 3 5 #"world"
0 0 24 3 2 #" ("
0 0 14 3 6 #"gensym"
0 0 24 3 3 #") ("
0 0 14 3 11 #"make-hasheq"
0 0 24 3 3 #") ("
0 0 14 3 25 #"unweighted-graph/directed"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"()))]"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ["
0 0 14 3 10 #"start-time"
0 0 24 3 2 #" ("
0 0 14 3 15 #"current-seconds"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 14 3 9 #"init-expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"systems"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 11 #"system-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 8 #"for-each"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 3 #"sys"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"displayln"
0 0 24 3 2 #" ("
0 0 14 3 9 #"system-in"
0 0 24 3 1 #" "
0 0 14 3 3 #"sys"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 12 #"add-to-graph"
0 0 24 3 1 #" "
0 0 14 3 3 #"sys"
0 0 24 3 2 #" ("
0 0 14 3 9 #"system-in"
0 0 24 3 1 #" "
0 0 14 3 3 #"sys"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 3 #") ("
0 0 14 3 22 #"world-dependency-graph"
0 0 24 3 2 #" ("
0 0 14 3 13 #"current-world"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 7 #"systems"
0 0 24 3 11 #")          "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 4 #"loop"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 17 3 14 #";; poll events"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 12 #"parameterize"
0 0 24 3 3 #" (["
0 0 14 3 14 #"current-events"
0 0 24 3 2 #" ("
0 0 14 3 11 #"poll-events"
0 0 24 3 2 #" ("
0 0 14 3 14 #"current-events"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 9 #"displayln"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"executing recess graph...\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 10 #"step-world"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 4 #"when"
0 0 24 3 2 #" ("
0 0 14 3 16 #"systems-enabled?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 9 #"stop-expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 4 #")) ("
0 0 14 3 4 #"loop"
0 0 24 3 8 #")))))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";; do a single iteration of a world"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"step-world"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"tsorted-world"
0 0 24 3 2 #" ("
0 0 14 3 5 #"tsort"
0 0 24 3 2 #" ("
0 0 14 3 22 #"world-dependency-graph"
0 0 24 3 2 #" ("
0 0 14 3 13 #"current-world"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"for-each"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 3 #"arg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                [("
0 0 14 3 6 #"event?"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"this is an event:\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 9 #"displayln"
0 0 24 3 2 #" ("
0 0 14 3 10 #"event-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                [("
0 0 14 3 7 #"system?"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"this is a system:\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 9 #"displayln"
0 0 24 3 2 #" ("
0 0 14 3 9 #"system-id"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 9 #"displayln"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"executing system:\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                 (("
0 0 14 3 11 #"system-body"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 2 #") "
0 0 14 3 3 #"arg"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"unknown\""
0 0 24 3 3 #") ("
0 0 14 3 9 #"displayln"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 13 #"tsorted-world"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";; the idea here is to poll the events by examing the hash values"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; if the hash value is a thunk we invoke it and replace the"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";; thunk with its result"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"poll-events"
0 0 24 3 1 #" "
0 0 14 3 5 #"evnts"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"->"
0 0 24 3 2 #"  "
0 0 14 3 8 #"hash-eq?"
0 0 24 3 1 #" "
0 0 14 3 8 #"hash-eq?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"poll"
0 0 24 3 1 #" "
0 0 14 3 10 #"event-pair"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 10 #"procedure?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 10 #"event-pair"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 10 #"event-pair"
0 0 24 3 4 #") (("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 10 #"event-pair"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 10 #"event-pair"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"make-hasheq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 4 #"poll"
0 0 24 3 2 #" ("
0 0 14 3 10 #"hash->list"
0 0 24 3 1 #" "
0 0 14 3 5 #"evnts"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"systems-enabled?"
0 0 24 3 1 #" "
0 0 14 3 7 #"systems"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 8 #"enabled?"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 3 #"sys"
0 0 24 3 3 #") ("
0 0 14 3 14 #"system-enabled"
0 0 24 3 1 #" "
0 0 14 3 3 #"sys"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"andmap"
0 0 24 3 1 #" "
0 0 14 3 8 #"enabled?"
0 0 24 3 1 #" "
0 0 14 3 7 #"systems"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";; An event is an identifier [also optionally a type predicate]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";; event ideas:"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #";; requiring a system as an implicit event = requiring all of that s"
 #"ystem's output events"
) 0 0 24 29 1 #"\n"
0 0 17 3 62
#";; in addition to an implicit event matching the system's name"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-generics"
0 0 24 3 1 #" "
0 0 14 3 13 #"event-generic"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"event"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 1 #" "
0 0 14 3 4 #"plus"
0 0 24 3 2 #") "
0 0 23 3 9 #"#:methods"
0 0 24 3 1 #" "
0 0 14 3 17 #"gen:event-generic"
0 0 24 3 4 #" [])"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 12 #"event:source"
0 0 24 3 1 #" "
0 0 14 3 5 #"event"
0 0 24 3 2 #" ("
0 0 14 3 5 #"input"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 10 #"event:sink"
0 0 24 3 1 #" "
0 0 14 3 5 #"event"
0 0 24 3 2 #" ("
0 0 14 3 6 #"output"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 15 #"event:transform"
0 0 24 3 1 #" "
0 0 14 3 5 #"event"
0 0 24 3 2 #" ("
0 0 14 3 1 #"f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"create-event"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 2 #" ["
0 0 14 3 5 #"value"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 4 #")] ["
0 0 14 3 4 #"zero"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 4 #")] ["
0 0 14 3 4 #"plus"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 5 #")])  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"event"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 1 #" "
0 0 14 3 4 #"plus"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"set-event!"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"hash-set!"
0 0 24 3 2 #" ("
0 0 14 3 14 #"current-events"
0 0 24 3 2 #") "
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 24 3 2 #" ("
0 0 15 3 12 #"define-event"
0 0 24 3 1 #" "
0 0 14 3 3 #"stx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 12 #"syntax-parse"
0 0 24 3 1 #" "
0 0 14 3 3 #"stx"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #"_"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 9 #"~optional"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 3 #") ("
0 0 14 3 9 #"~optional"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 3 #") ("
0 0 14 3 9 #"~optional"
0 0 24 3 1 #" "
0 0 14 3 4 #"plus"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 14 #";; check first"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 5 #"event"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 2 #"~?"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 4 #")) ("
0 0 14 3 2 #"~?"
0 0 24 3 1 #" "
0 0 14 3 4 #"plus"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"hash-set!"
0 0 24 3 2 #" ("
0 0 14 3 14 #"current-events"
0 0 24 3 2 #") "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 2 #"~?"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 4 #"name"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";;; i'm imagining a library of pre-defined source events"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";;; the source events can take an input which is a lambda"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";;; we want to poll the sources to produce their value"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";; clock event"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";; just an epoch for now"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"clock/e"
0 0 24 3 2 #" ("
0 0 14 3 12 #"event:source"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"clock/e"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 5 #" () ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 15 #"current-seconds"
0 0 24 3 3 #") ("
0 0 14 3 10 #"start-time"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";; record value in the hash table as a lambda"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"hash-set!"
0 0 24 3 2 #" ("
0 0 14 3 14 #"current-events"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"clock/e"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 5 #" () ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 15 #"current-seconds"
0 0 24 3 3 #") ("
0 0 14 3 10 #"start-time"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";;; define-system syntax and identifier bindings"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";;; let's list these in the order they should be bound/evaluated"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;; top->bottom"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; binds name as a system object"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; binds name as an event object"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-system"
0 0 24 3 1 #" "
0 0 14 3 7 #"name:id"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 65
#";; evt is evaluated once upon recess initialization [perhaps this"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 68
(
 #";; should be a special form of \"event expression?\" same with below"
 #".]"
) 0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"~seq"
0 0 24 3 1 #" "
0 0 23 3 4 #"#:in"
0 0 24 3 2 #" ["
0 0 14 3 11 #"evt-name:id"
0 0 24 3 1 #" "
0 0 14 3 8 #"evt:expr"
0 0 24 3 3 #"]) "
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 65
#";; initial-state is evaluated once upon recess initialization and"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 18 #";; becomes state-0"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 45 #";; default state-name is (generate-temporary)"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 30 #";; default initial-state is #f"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"~optional"
0 0 24 3 2 #" ("
0 0 14 3 4 #"~seq"
0 0 24 3 1 #" "
0 0 23 3 7 #"#:state"
0 0 24 3 2 #" ["
0 0 14 3 13 #"state-name:id"
0 0 24 3 1 #" "
0 0 14 3 18 #"initial-state:expr"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 43 #";; default pre-name is (generate-temporary)"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 49 #";; state-name is bound inside pre-body to state-0"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 37 #";; evt-name ... is bound to evt value"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 48 #";; may modify state (changed version is state-1)"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 20 #";; returns pre-val-0"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 20 #";; default is (void)"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"~optional"
0 0 24 3 2 #" ("
0 0 14 3 4 #"~seq"
0 0 24 3 1 #" "
0 0 23 3 5 #"#:pre"
0 0 24 3 1 #" "
0 0 14 3 11 #"pre-name:id"
0 0 24 3 1 #" "
0 0 14 3 13 #"pre-body:expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 54 #";; state-name is bound inside enabled?-body to state-1"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 33 #";; pre-name is bound to pre-val-0"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 16 #";; default is #t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 51 #";; if #f, then query is not run, map is not run and"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 37 #";; reduce is run with empty sequence."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"~optional"
0 0 24 3 2 #" ("
0 0 14 3 4 #"~seq"
0 0 24 3 1 #" "
0 0 23 3 10 #"#:enabled?"
0 0 24 3 1 #" "
0 0 14 3 18 #"enabled?-body:expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 26 #";; query is a static-query"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 18 #";; static-query :="
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 59
#";;   [component-name:id component-binding:static-component]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 8 #";;   ..."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 22 #";; static-component :="
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 48 #";;   component-binding:id (bound to a component)"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 49 #";;   archetype-binding:id (bound to an archetype)"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 47 #";; entity-name defaults to (generate-temporary)"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"~optional"
0 0 24 3 2 #" ("
0 0 14 3 4 #"~seq"
0 0 24 3 1 #" "
0 0 23 3 7 #"#:query"
0 0 24 3 1 #" "
0 0 14 3 14 #"entity-name:id"
0 0 24 3 1 #" "
0 0 14 3 18 #"query:static-query"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 49 #";; state-name is bound inside map-body to state-1"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 33 #";; pre-name is bound to pre-val-0"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 37 #";; entity-name is bound to the entity"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 45 #";; maps-name defaults to (generate-temporary)"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 38 #";; returns map-val for entity (type A)"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"~optional"
0 0 24 3 2 #" ("
0 0 14 3 4 #"~seq"
0 0 24 3 1 #" "
0 0 23 3 5 #"#:map"
0 0 24 3 1 #" "
0 0 14 3 12 #"maps-name:id"
0 0 24 3 1 #" "
0 0 14 3 13 #"map-body:expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 52 #";; state-name is bound inside reduce-body to state-1"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 33 #";; pre-name is bound to pre-val-0"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 70
(
 #";; maps-name is bound to a sequence of the map-values (could be empt"
 #"y)"
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 30 #";; returns reduce-val (type A)"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 20 #";; default is (void)"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 47 #";; reduce-name defaults to (generate-temporary)"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"~optional"
0 0 24 3 2 #" ("
0 0 14 3 4 #"~seq"
0 0 24 3 1 #" "
0 0 23 3 8 #"#:reduce"
0 0 24 3 1 #" "
0 0 14 3 14 #"reduce-name:id"
0 0 24 3 1 #" "
0 0 14 3 16 #"reduce-body:expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 50 #";; state-name is bound inside post-body to state-1"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 33 #";; pre-name is bound to pre-val-0"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 49 #";; reduce-name is bound to complete reduce result"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 63
#";; returns state-N which becomes the new state-0 next iteration"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"~optional"
0 0 24 3 2 #" ("
0 0 14 3 4 #"~seq"
0 0 24 3 1 #" "
0 0 23 3 6 #"#:post"
0 0 24 3 1 #" "
0 0 14 3 14 #"post-body:expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 53 #";; state-name is bound inside evt-val-body to state-N"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 33 #";; pre-name is bound to pre-val-0"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 49 #";; reduce-name is bound to complete reduce result"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 64
#";; evt should evaluate to an event (and is evaluated upon recess"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 18 #";; initialization)"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 56 #";; evt-val-body should evaluate to value of the evt type"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"~seq"
0 0 24 3 1 #" "
0 0 23 3 5 #"#:out"
0 0 24 3 2 #" ["
0 0 14 3 8 #"evt:expr"
0 0 24 3 1 #" "
0 0 14 3 17 #"evt-val-body:expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 3 #"]) "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; system struct"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-generics"
0 0 24 3 1 #" "
0 0 14 3 14 #"system-generic"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 6 #"system"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 3 #"pre"
0 0 24 3 1 #" "
0 0 14 3 7 #"enabled"
0 0 24 3 1 #" "
0 0 14 3 5 #"query"
0 0 24 3 1 #" "
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 6 #"reduce"
0 0 24 3 1 #" "
0 0 14 3 4 #"post"
0 0 24 3 1 #" "
0 0 14 3 3 #"out"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 23 3 9 #"#:methods"
0 0 24 3 1 #" "
0 0 14 3 18 #"gen:system-generic"
0 0 24 3 3 #" []"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 23 3 9 #"#:methods"
0 0 24 3 1 #" "
0 0 14 3 17 #"gen:event-generic"
0 0 24 3 3 #" []"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 23 3 9 #"#:mutable"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"create-system"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 4 #"name"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 3 #"pre"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 7 #"enabled"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 5 #"query"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 3 #"map"
0 0 24 3 2 #"  "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 6 #"reduce"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 4 #"post"
0 0 24 3 2 #"  "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"system"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 3 #"pre"
0 0 24 3 1 #" "
0 0 14 3 7 #"enabled"
0 0 24 3 1 #" "
0 0 14 3 5 #"query"
0 0 24 3 1 #" "
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 6 #"reduce"
0 0 24 3 1 #" "
0 0 14 3 4 #"post"
0 0 24 3 1 #" "
0 0 14 3 3 #"out"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";; register a system in the graph and have it print out the graph's"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; structure on each call"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; last graph printed is the full picture"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 24 3 2 #" ("
0 0 15 3 13 #"define-system"
0 0 24 3 1 #" "
0 0 14 3 3 #"stx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 12 #"syntax-parse"
0 0 24 3 1 #" "
0 0 14 3 3 #"stx"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #"_"
0 0 24 3 1 #" "
0 0 14 3 14 #"system-name:id"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"~seq"
0 0 24 3 1 #" "
0 0 23 3 4 #"#:in"
0 0 24 3 2 #" ["
0 0 14 3 11 #"evt-name:id"
0 0 24 3 1 #" "
0 0 14 3 8 #"evt:expr"
0 0 24 3 3 #"]) "
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 9 #"~optional"
0 0 24 3 2 #" ("
0 0 14 3 4 #"~seq"
0 0 24 3 1 #" "
0 0 23 3 7 #"#:state"
0 0 24 3 2 #" ["
0 0 14 3 19 #"given-state-name:id"
0 0 24 3 1 #" "
0 0 14 3 18 #"initial-state:expr"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 9 #"~optional"
0 0 24 3 2 #" ("
0 0 14 3 4 #"~seq"
0 0 24 3 1 #" "
0 0 23 3 5 #"#:pre"
0 0 24 3 1 #" "
0 0 14 3 17 #"given-pre-name:id"
0 0 24 3 1 #" "
0 0 14 3 13 #"pre-body:expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 9 #"~optional"
0 0 24 3 2 #" ("
0 0 14 3 4 #"~seq"
0 0 24 3 1 #" "
0 0 23 3 10 #"#:enabled?"
0 0 24 3 1 #" "
0 0 14 3 18 #"enabled?-body:expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 9 #"~optional"
0 0 24 3 2 #" ("
0 0 14 3 4 #"~seq"
0 0 24 3 1 #" "
0 0 23 3 7 #"#:query"
0 0 24 3 1 #" "
0 0 14 3 20 #"given-entity-name:id"
0 0 24 3 1 #" "
0 0 14 3 10 #"query:expr"
0 0 24 3 1 #" "
0 0 17 3 2 #"#;"
0 0 14 3 18 #"query:static-query"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 9 #"~optional"
0 0 24 3 2 #" ("
0 0 14 3 4 #"~seq"
0 0 24 3 1 #" "
0 0 23 3 5 #"#:map"
0 0 24 3 1 #" "
0 0 14 3 18 #"given-maps-name:id"
0 0 24 3 1 #" "
0 0 14 3 13 #"map-body:expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 9 #"~optional"
0 0 24 3 2 #" ("
0 0 14 3 4 #"~seq"
0 0 24 3 1 #" "
0 0 23 3 8 #"#:reduce"
0 0 24 3 1 #" "
0 0 14 3 20 #"given-reduce-name:id"
0 0 24 3 1 #" "
0 0 14 3 14 #"zero-expr:expr"
0 0 24 3 1 #" "
0 0 14 3 16 #"reduce-body:expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 9 #"~optional"
0 0 24 3 2 #" ("
0 0 14 3 4 #"~seq"
0 0 24 3 1 #" "
0 0 23 3 6 #"#:post"
0 0 24 3 1 #" "
0 0 14 3 14 #"post-body:expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"~seq"
0 0 24 3 1 #" "
0 0 23 3 5 #"#:out"
0 0 24 3 2 #" ["
0 0 14 3 12 #"out-evt:expr"
0 0 24 3 1 #" "
0 0 14 3 17 #"evt-val-body:expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 3 #"]) "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 23 3 6 #"#:with"
0 0 24 3 1 #" "
0 0 14 3 10 #"state-name"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 14 3 2 #"~?"
0 0 24 3 1 #" "
0 0 14 3 16 #"given-state-name"
0 0 24 3 1 #" "
0 0 15 3 18 #"default-state-name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 23 3 6 #"#:with"
0 0 24 3 1 #" "
0 0 14 3 8 #"pre-name"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 14 3 2 #"~?"
0 0 24 3 1 #" "
0 0 14 3 14 #"given-pre-name"
0 0 24 3 1 #" "
0 0 15 3 16 #"default-pre-name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 23 3 6 #"#:with"
0 0 24 3 1 #" "
0 0 14 3 9 #"maps-name"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 14 3 2 #"~?"
0 0 24 3 1 #" "
0 0 14 3 15 #"given-maps-name"
0 0 24 3 1 #" "
0 0 15 3 17 #"default-maps-name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 23 3 6 #"#:with"
0 0 24 3 1 #" "
0 0 14 3 11 #"reduce-name"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 14 3 2 #"~?"
0 0 24 3 1 #" "
0 0 14 3 17 #"given-reduce-name"
0 0 24 3 1 #" "
0 0 15 3 19 #"default-reduce-name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 23 3 6 #"#:with"
0 0 24 3 1 #" "
0 0 14 3 11 #"entity-name"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 14 3 2 #"~?"
0 0 24 3 1 #" "
0 0 14 3 17 #"given-entity-name"
0 0 24 3 1 #" "
0 0 15 3 19 #"default-entity-name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 15 3 5 #"begin"
0 0 24 3 3 #"   "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"system-name"
0 0 24 3 2 #" ("
0 0 14 3 13 #"create-system"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"system-name"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 14 #"set-system-in!"
0 0 24 3 1 #" "
0 0 14 3 11 #"system-name"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"evt"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 16 #"set-system-body!"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 11 #"system-name"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 3 #"sys"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 4 #"let*"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                (["
0 0 14 3 11 #"prior-state"
0 0 24 3 2 #" ("
0 0 14 3 12 #"system-state"
0 0 24 3 1 #" "
0 0 14 3 3 #"sys"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 12 #"pre-body-fun"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 10 #"state-name"
0 0 24 3 1 #" "
0 0 14 3 4 #"evts"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 15 3 12 #"match-define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 8 #"evt-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #") "
0 0 14 3 4 #"evts"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 2 #"~?"
0 0 24 3 2 #" ("
0 0 15 3 5 #"begin"
0 0 24 3 1 #" "
0 0 14 3 8 #"pre-body"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 3 #") ("
0 0 14 3 4 #"void"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 16 #"enabled-body-fun"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 10 #"state-name"
0 0 24 3 1 #" "
0 0 14 3 8 #"pre-name"
0 0 24 3 1 #" "
0 0 14 3 4 #"evts"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 15 3 12 #"match-define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 8 #"evt-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #") "
0 0 14 3 4 #"evts"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 2 #"~?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 14 3 13 #"enabled?-body"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 3 #") ("
0 0 14 3 4 #"void"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 15 #"reduce-body-fun"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 10 #"state-name"
0 0 24 3 1 #" "
0 0 14 3 8 #"pre-name"
0 0 24 3 1 #" "
0 0 14 3 9 #"maps-name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 5 #"foldl"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 14 3 11 #"reduce-body"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #") "
0 0 14 3 11 #"reduce-name"
0 0 24 3 1 #" "
0 0 14 3 4 #"zero"
0 0 24 3 1 #" "
0 0 14 3 8 #"entities"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 2 #"~?"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"void"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 13 #"post-body-fun"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 10 #"state-name"
0 0 24 3 1 #" "
0 0 14 3 8 #"pre-name"
0 0 24 3 1 #" "
0 0 14 3 11 #"reduce-name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 2 #"~?"
0 0 24 3 2 #" ("
0 0 15 3 5 #"begin"
0 0 24 3 1 #" "
0 0 14 3 9 #"post-body"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 3 #") ("
0 0 14 3 4 #"void"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 17 #"output-events-fun"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 10 #"state-name"
0 0 24 3 1 #" "
0 0 14 3 8 #"pre-name"
0 0 24 3 1 #" "
0 0 14 3 11 #"reduce-name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"create-event"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"out-event"
0 0 24 3 2 #" ("
0 0 14 3 2 #"~?"
0 0 24 3 2 #" ("
0 0 15 3 5 #"begin"
0 0 24 3 1 #" "
0 0 14 3 12 #"evt-val-body"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #") "
0 0 14 3 4 #"void"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 7 #"state-0"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 11 #"prior-state"
0 0 24 3 1 #" "
0 0 14 3 11 #"prior-state"
0 0 24 3 2 #" ("
0 0 14 3 2 #"~?"
0 0 24 3 1 #" "
0 0 14 3 13 #"initial-state"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 4 #")) ]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 10 #"state-name"
0 0 24 3 1 #" "
0 0 14 3 7 #"state-0"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 14 #"get-event-vals"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 2 #" ("
0 0 14 3 14 #"current-events"
0 0 24 3 3 #") ("
0 0 14 3 10 #"event-name"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 10 #"event-vals"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 14 #"get-event-vals"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"evt"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 9 #"pre-val-0"
0 0 24 3 2 #" ("
0 0 14 3 12 #"pre-body-fun"
0 0 24 3 1 #" "
0 0 14 3 10 #"state-name"
0 0 24 3 1 #" "
0 0 14 3 10 #"event-vals"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 8 #"pre-name"
0 0 24 3 1 #" "
0 0 14 3 9 #"pre-val-0"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 10 #"state-name"
0 0 24 3 1 #" "
0 0 14 3 8 #"pre-name"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 12 #"input-events"
0 0 24 3 2 #" ("
0 0 15 3 10 #"let-values"
0 0 24 3 4 #" ([("
0 0 14 3 8 #"evt-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 3 #") ("
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 14 3 3 #"evt"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 8 #"evt-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 7 #"enabled"
0 0 24 3 2 #" ("
0 0 14 3 16 #"enabled-body-fun"
0 0 24 3 1 #" "
0 0 14 3 10 #"state-name"
0 0 24 3 1 #" "
0 0 14 3 8 #"pre-name"
0 0 24 3 1 #" "
0 0 14 3 10 #"event-vals"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 8 #"entities"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 7 #"enabled"
0 0 24 3 2 #" ("
0 0 14 3 2 #"~?"
0 0 24 3 1 #" "
0 0 14 3 5 #"query"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 12 #"map-body-fun"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 10 #"state-name"
0 0 24 3 1 #" "
0 0 14 3 8 #"pre-name"
0 0 24 3 1 #" "
0 0 14 3 11 #"entity-name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 2 #"~?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 11 #"entity-name"
0 0 24 3 2 #") "
0 0 14 3 8 #"map-body"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #") "
0 0 14 3 8 #"entities"
0 0 24 3 3 #") ("
0 0 14 3 4 #"void"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 8 #"maps-val"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 2 #"if"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 14 3 7 #"enabled"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 12 #"map-body-fun"
0 0 24 3 1 #" "
0 0 14 3 10 #"state-name"
0 0 24 3 1 #" "
0 0 14 3 8 #"pre-name"
0 0 24 3 1 #" "
0 0 14 3 8 #"entities"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 4 #"list"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 9 #"maps-name"
0 0 24 3 1 #" "
0 0 14 3 8 #"maps-val"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 10 #"reduce-val"
0 0 24 3 2 #" ("
0 0 14 3 15 #"reduce-body-fun"
0 0 24 3 1 #" "
0 0 14 3 10 #"state-name"
0 0 24 3 1 #" "
0 0 14 3 8 #"pre-name"
0 0 24 3 1 #" "
0 0 14 3 9 #"maps-name"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 11 #"reduce-name"
0 0 24 3 1 #" "
0 0 14 3 10 #"reduce-val"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 4 #"post"
0 0 24 3 2 #" ("
0 0 14 3 13 #"post-body-fun"
0 0 24 3 1 #" "
0 0 14 3 10 #"state-name"
0 0 24 3 1 #" "
0 0 14 3 8 #"pre-name"
0 0 24 3 1 #" "
0 0 14 3 11 #"reduce-name"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 10 #"state-name"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"void?"
0 0 24 3 1 #" "
0 0 14 3 4 #"post"
0 0 24 3 3 #")) "
0 0 14 3 4 #"post"
0 0 24 3 1 #" "
0 0 14 3 10 #"state-name"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 13 #"output-events"
0 0 24 3 2 #" ("
0 0 14 3 17 #"output-events-fun"
0 0 24 3 1 #" "
0 0 14 3 10 #"state-name"
0 0 24 3 1 #" "
0 0 14 3 8 #"pre-name"
0 0 24 3 1 #" "
0 0 14 3 11 #"reduce-name"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 17 3 2 #"#;"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 17 #"set-system-state!"
0 0 24 3 1 #" "
0 0 14 3 11 #"system-name"
0 0 24 3 1 #" "
0 0 14 3 10 #"state-name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 19 #"set-system-enabled!"
0 0 24 3 1 #" "
0 0 14 3 11 #"system-name"
0 0 24 3 1 #" "
0 0 14 3 7 #"enabled"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 11 #"system-name"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";; helper methods"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"all-defined-systems"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 14 3 19 #"all-defined-systems"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 9 #"archetype"
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"entities"
0 0 24 3 2 #" ("
0 0 14 3 14 #"world-entities"
0 0 24 3 2 #" ("
0 0 14 3 13 #"current-world"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"archetype-match?"
0 0 24 3 1 #" "
0 0 14 3 3 #"ent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"equal?"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"list->set"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 12 #"component-id"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 9 #"archetype"
0 0 24 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"list->set"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 10 #"hash->list"
0 0 24 3 2 #" ("
0 0 14 3 17 #"entity-components"
0 0 24 3 1 #" "
0 0 14 3 3 #"ent"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"matches"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 24 3 1 #" "
0 0 14 3 16 #"archetype-match?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"hash->list"
0 0 24 3 1 #" "
0 0 14 3 8 #"entities"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 2 #"#;"
0 0 24 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 24 3 1 #" "
0 0 14 3 7 #"matches"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 7 #"matches"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"add-to-graph"
0 0 24 3 1 #" "
0 0 14 3 11 #"system-name"
0 0 24 3 1 #" "
0 0 14 3 12 #"input-events"
0 0 24 3 1 #" "
0 0 14 3 13 #"output-events"
0 0 24 3 1 #" "
0 0 14 3 12 #"recess-graph"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"add-vertex!"
0 0 24 3 1 #" "
0 0 14 3 12 #"recess-graph"
0 0 24 3 1 #" "
0 0 14 3 11 #"system-name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"for-each"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 2 #"ev"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 11 #"add-vertex!"
0 0 24 3 1 #" "
0 0 14 3 12 #"recess-graph"
0 0 24 3 1 #" "
0 0 14 3 2 #"ev"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 18 #"add-directed-edge!"
0 0 24 3 1 #" "
0 0 14 3 12 #"recess-graph"
0 0 24 3 1 #" "
0 0 14 3 2 #"ev"
0 0 24 3 1 #" "
0 0 14 3 11 #"system-name"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 12 #"input-events"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"for-each"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 2 #"ev"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 11 #"add-vertex!"
0 0 24 3 1 #" "
0 0 14 3 12 #"recess-graph"
0 0 24 3 1 #" "
0 0 14 3 2 #"ev"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 18 #"add-directed-edge!"
0 0 24 3 1 #" "
0 0 14 3 12 #"recess-graph"
0 0 24 3 1 #" "
0 0 14 3 11 #"system-name"
0 0 24 3 1 #" "
0 0 14 3 2 #"ev"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 13 #"output-events"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 2 #"#;"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 8 #"graphviz"
0 0 24 3 1 #" "
0 0 14 3 12 #"recess-graph"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0           0
